#!/bin/sh



type python3 >/dev/null 2>&1 && has_python3=true || has_python3=false
check_python3() {
  python3 -m py_compile "$1"
  return $?
}

type luac >/dev/null 2>&1 && has_luac=true || has_luac=false
check_lua() {
  luac -o /dev/null "$1"
  return $?
}

type php >/dev/null 2>&1 && has_php=true || has_php=false
check_php() {
  php -l "$1" >/dev/null
  return $?
}

type sh >/dev/null 2>&1 && has_shell=true || has_shell=false  
check_shell() {
  sh -n "$1"
  return $?
}

type bash >/dev/null 2>&1 && has_bash=true || has_bash=false
check_bash() {
  bash -n "$1"
}

type dash >/dev/null 2>&1 && has_dash=true || has_dash=false
check_dash() {
  dash -n "$1"
}




check_file() {
  [ -d "$1" ] && return 0
  case "$1" in
  *.py)
    $has_python3 || return 0
    echo "python3"
    return 0
    ;;
  *.lua)
    $has_luac || return 0
    echo "lua"
    return 0
    ;;
  *.php)
    $has_php || return 0
    echo "php"
    return 0
    ;;
  esac
  if [ -x "$1" ] ; then
    local hashbang=$(head -1 "$1")
    case "$hashbang" in
      \#!/bin/sh*)
        $has_shell || return 0
        echo "shell"
        return 0
        ;;
      \#!/bin/bash*)
        $has_bash || return 0
        echo "bash"
        return 0
        ;;
      \#!/bin/dash*)
        $has_dash || return 0
        echo "dash"
        return 0
        ;;
    esac
  fi
  echo ""
  return 0
}

find . -path ./.git -prune -o -type f  | (
  return=0
  while read script
  do
    op=$(check_file "$script")
    [ -z "$op" ] && continue
    echo -n "$script: "
    if check_"$op" "$script" ; then
      echo "OK"
    else
      return=1
    fi
  done
  exit $return
)
exit $?
